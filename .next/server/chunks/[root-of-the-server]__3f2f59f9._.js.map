{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/home/Desktop/site/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\n\nconst prisma = new PrismaClient();\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { name, email, password } = await request.json();\n\n    // Validation\n    if (!name || !email || !password) {\n      return NextResponse.json(\n        { error: 'Tüm alanları doldurmanız gerekiyor' },\n        { status: 400 }\n      );\n    }\n\n    if (password.length < 6) {\n      return NextResponse.json(\n        { error: 'Şifre en az 6 karakter olmalıdır' },\n        { status: 400 }\n      );\n    }\n\n    // Email format validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return NextResponse.json(\n        { error: 'Geçerli bir e-posta adresi giriniz' },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      return NextResponse.json(\n        { error: 'Bu e-posta adresi zaten kullanılıyor' },\n        { status: 400 }\n      );\n    }\n\n    // Check if this is the first user (make them admin)\n    const userCount = await prisma.user.count();\n    const isFirstUser = userCount === 0;\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword,\n        role: isFirstUser ? 'ADMIN' : 'USER', // İlk kullanıcı admin olur\n      },\n    });\n\n    // Return success response (don't include password)\n    const { password: _, ...userWithoutPassword } = user;\n    \n    const message = isFirstUser \n      ? 'Kayıt başarılı! İlk kullanıcı olarak admin yetkileriniz var. Giriş yapabilirsiniz.'\n      : 'Kayıt başarılı! Giriş yapabilirsiniz.';\n    \n    return NextResponse.json(\n      { \n        message,\n        user: userWithoutPassword,\n        isAdmin: isFirstUser\n      },\n      { status: 201 }\n    );\n\n  } catch (error) {\n    console.error('Register error:', error);\n    return NextResponse.json(\n      { error: 'Kayıt sırasında bir hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpD,aAAa;QACb,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAM,aAAa;QACnB,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,oDAAoD;QACpD,MAAM,YAAY,MAAM,OAAO,IAAI,CAAC,KAAK;QACzC,MAAM,cAAc,cAAc;QAElC,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,cAAc;QACd,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,UAAU;gBACV,MAAM,cAAc,UAAU;YAChC;QACF;QAEA,mDAAmD;QACnD,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,MAAM,UAAU,cACZ,uFACA;QAEJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE;YACA,MAAM;YACN,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAkC,GAC3C;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}