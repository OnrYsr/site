{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/home/Desktop/site/src/app/api/banners/active/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// Aktif banner'ları getir (frontend için)\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const type = searchParams.get('type'); // 'HERO' veya 'FEATURED_PRODUCTS'\n    const now = new Date();\n    \n    const whereCondition: any = {\n      isActive: true,\n      OR: [\n        {\n          AND: [\n            { startDate: { lte: now } },\n            { endDate: { gte: now } }\n          ]\n        },\n        {\n          AND: [\n            { startDate: null },\n            { endDate: null }\n          ]\n        },\n        {\n          AND: [\n            { startDate: { lte: now } },\n            { endDate: null }\n          ]\n        },\n        {\n          AND: [\n            { startDate: null },\n            { endDate: { gte: now } }\n          ]\n        }\n      ]\n    };\n\n    // Type parametresi varsa ekle\n    if (type && (type === 'HERO' || type === 'FEATURED_PRODUCTS')) {\n      whereCondition.type = type;\n    }\n    \n    const banners = await prisma.banner.findMany({\n      where: whereCondition,\n      orderBy: [\n        { order: 'asc' },\n        { createdAt: 'desc' }\n      ],\n      select: {\n        id: true,\n        title: true,\n        subtitle: true,\n        image: true,\n        link: true,\n        type: true,\n        order: true\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: banners,\n      count: banners.length\n    });\n\n  } catch (error) {\n    console.error('Active banners API Error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Aktif banner\\'lar yüklenirken hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAGxB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,OAAO,aAAa,GAAG,CAAC,SAAS,kCAAkC;QACzE,MAAM,MAAM,IAAI;QAEhB,MAAM,iBAAsB;YAC1B,UAAU;YACV,IAAI;gBACF;oBACE,KAAK;wBACH;4BAAE,WAAW;gCAAE,KAAK;4BAAI;wBAAE;wBAC1B;4BAAE,SAAS;gCAAE,KAAK;4BAAI;wBAAE;qBACzB;gBACH;gBACA;oBACE,KAAK;wBACH;4BAAE,WAAW;wBAAK;wBAClB;4BAAE,SAAS;wBAAK;qBACjB;gBACH;gBACA;oBACE,KAAK;wBACH;4BAAE,WAAW;gCAAE,KAAK;4BAAI;wBAAE;wBAC1B;4BAAE,SAAS;wBAAK;qBACjB;gBACH;gBACA;oBACE,KAAK;wBACH;4BAAE,WAAW;wBAAK;wBAClB;4BAAE,SAAS;gCAAE,KAAK;4BAAI;wBAAE;qBACzB;gBACH;aACD;QACH;QAEA,8BAA8B;QAC9B,IAAI,QAAQ,CAAC,SAAS,UAAU,SAAS,mBAAmB,GAAG;YAC7D,eAAe,IAAI,GAAG;QACxB;QAEA,MAAM,UAAU,MAAM,OAAO,MAAM,CAAC,QAAQ,CAAC;YAC3C,OAAO;YACP,SAAS;gBACP;oBAAE,OAAO;gBAAM;gBACf;oBAAE,WAAW;gBAAO;aACrB;YACD,QAAQ;gBACN,IAAI;gBACJ,OAAO;gBACP,UAAU;gBACV,OAAO;gBACP,MAAM;gBACN,MAAM;gBACN,OAAO;YACT;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,OAAO,QAAQ,MAAM;QACvB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA4C,GACrE;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}