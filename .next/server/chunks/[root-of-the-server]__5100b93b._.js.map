{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/home/Desktop/site/src/app/api/categories/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// Helper function to generate slug from name\nfunction generateSlug(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/ğ/g, 'g')\n    .replace(/ü/g, 'u') \n    .replace(/ş/g, 's')\n    .replace(/ı/g, 'i')\n    .replace(/ö/g, 'o')\n    .replace(/ç/g, 'c')\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .trim()\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-');\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const homepage = searchParams.get('homepage');\n    \n    // Base where condition\n    const whereCondition: any = {};\n    \n    // If homepage=true parameter is passed, only show categories with showOnHomepage=true\n    if (homepage === 'true') {\n      whereCondition.showOnHomepage = true;\n    }\n    \n    const categories = await prisma.category.findMany({\n      where: whereCondition,\n      include: {\n        subcategories: {\n          where: {\n            isActive: true\n          },\n          include: {\n            _count: {\n              select: {\n                products: {\n                  where: {\n                    isActive: true\n                  }\n                }\n              }\n            }\n          },\n          orderBy: [\n            {\n              displayOrder: 'asc'\n            },\n            {\n              name: 'asc'\n            }\n          ]\n        },\n        _count: {\n          select: {\n            products: {\n              where: {\n                isActive: true\n              }\n            }\n          }\n        }\n      },\n      orderBy: [\n        {\n          displayOrder: 'asc'\n        },\n        {\n          name: 'asc'\n        }\n      ]\n    });\n\n    const formattedCategories = categories.map((category: any) => {\n      // Ana kategoriler için product count hesapla: doğrudan bağlı + alt kategorilerdeki\n      const subcategoriesProductCount = category.subcategories.reduce((total: number, sub: any) => {\n        return total + sub._count.products;\n      }, 0);\n      \n      const totalProductCount = category._count.products + subcategoriesProductCount;\n\n      return {\n        id: category.id,\n        name: category.name,\n        slug: category.slug,\n        description: category.description,\n        image: category.image,\n        parentId: category.parentId,\n        displayOrder: category.displayOrder,\n        isActive: category.isActive,\n        productCount: totalProductCount,\n        subcategories: category.subcategories.map((sub: any) => ({\n          id: sub.id,\n          name: sub.name,\n          slug: sub.slug,\n          description: sub.description,\n          image: sub.image,\n          parentId: sub.parentId,\n          displayOrder: sub.displayOrder,\n          isActive: sub.isActive,\n          productCount: sub._count.products,\n          createdAt: sub.createdAt,\n          updatedAt: sub.updatedAt\n        })),\n        createdAt: category.createdAt,\n        updatedAt: category.updatedAt\n      };\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: formattedCategories,\n      count: formattedCategories.length\n    });\n\n  } catch (error) {\n    console.error('Categories API Error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Kategoriler yüklenirken hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { name, description, image, parentId, displayOrder, isActive, showOnHomepage } = await request.json();\n\n    // Validation\n    if (!name?.trim()) {\n      return NextResponse.json(\n        { success: false, error: 'Kategori adı gereklidir' },\n        { status: 400 }\n      );\n    }\n\n    // Validate displayOrder\n    const orderValue = Number(displayOrder);\n    if (isNaN(orderValue) || orderValue < 0 || orderValue > 999) {\n      return NextResponse.json(\n        { success: false, error: 'Gösterim sırası 0-999 arasında sayısal bir değer olmalıdır' },\n        { status: 400 }\n      );\n    }\n\n    // Validate parent category if provided\n    if (parentId) {\n      const parentCategory = await prisma.category.findUnique({\n        where: { id: parentId }\n      });\n      if (!parentCategory) {\n        return NextResponse.json(\n          { success: false, error: 'Üst kategori bulunamadı' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Generate slug\n    const baseSlug = generateSlug(name);\n    let slug = baseSlug;\n    let counter = 1;\n\n    // Check if slug exists and generate unique one\n    while (await prisma.category.findUnique({ where: { slug } })) {\n      slug = `${baseSlug}-${counter}`;\n      counter++;\n    }\n\n    // Create category\n    const category = await prisma.category.create({\n      data: {\n        name: name.trim(),\n        slug,\n        description: description?.trim() || null,\n        image: image?.trim() || null,\n        parentId: parentId || null,\n        displayOrder: orderValue,\n        isActive: isActive !== undefined ? isActive : true,\n        showOnHomepage: showOnHomepage !== undefined ? showOnHomepage : false\n      },\n      include: {\n        subcategories: {\n          where: {\n            isActive: true\n          },\n          include: {\n            _count: {\n              select: {\n                products: {\n                  where: {\n                    isActive: true\n                  }\n                }\n              }\n            }\n          }\n        },\n        _count: {\n          select: {\n            products: true\n          }\n        }\n      }\n    });\n\n    const formattedCategory = {\n      id: category.id,\n      name: category.name,\n      slug: category.slug,\n      description: category.description,\n      image: category.image,\n      parentId: category.parentId,\n      isActive: category.isActive,\n      productCount: category._count.products,\n      subcategories: category.subcategories.map(sub => ({\n        id: sub.id,\n        name: sub.name,\n        slug: sub.slug,\n        description: sub.description,\n        image: sub.image,\n        parentId: sub.parentId,\n        isActive: sub.isActive,\n        productCount: sub._count.products,\n        createdAt: sub.createdAt,\n        updatedAt: sub.updatedAt\n      })),\n      createdAt: category.createdAt,\n      updatedAt: category.updatedAt\n    };\n\n    return NextResponse.json({\n      success: true,\n      message: 'Kategori başarıyla oluşturuldu',\n      data: formattedCategory\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('Create category error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Kategori oluşturulurken hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}