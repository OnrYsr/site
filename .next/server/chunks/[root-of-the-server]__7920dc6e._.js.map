{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/home/Desktop/site/src/app/api/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const category = searchParams.get('category');\n    const search = searchParams.get('search');\n    const sortBy = searchParams.get('sortBy') || 'featured';\n    const featured = searchParams.get('featured');\n\n    // Base query\n    const where: any = {\n      isActive: true\n    };\n\n    // Kategori filtresi\n    if (category && category !== 'all') {\n      const categoryData = await prisma.category.findUnique({\n        where: { slug: category }\n      });\n      if (categoryData) {\n        where.categoryId = categoryData.id;\n      }\n    }\n\n    // Arama filtresi\n    if (search) {\n      where.OR = [\n        { name: { contains: search, mode: 'insensitive' } },\n        { description: { contains: search, mode: 'insensitive' } }\n      ];\n    }\n\n    // Öne çıkan ürünler filtresi\n    if (featured === 'true') {\n      where.isFeatured = true;\n    }\n\n    // Sıralama\n    let orderBy: any = {};\n    switch (sortBy) {\n      case 'price-low':\n        orderBy = { price: 'asc' };\n        break;\n      case 'price-high':\n        orderBy = { price: 'desc' };\n        break;\n      case 'newest':\n        orderBy = { createdAt: 'desc' };\n        break;\n      case 'name':\n        orderBy = { name: 'asc' };\n        break;\n      default:\n        orderBy = [{ isFeatured: 'desc' }, { createdAt: 'desc' }];\n    }\n\n    const products = await prisma.product.findMany({\n      where,\n      orderBy,\n      include: {\n        category: {\n          select: {\n            name: true,\n            slug: true\n          }\n        },\n        discounts: {\n          where: {\n            isActive: true,\n            startDate: { lte: new Date() },\n            endDate: { gte: new Date() }\n          }\n        },\n        reviews: {\n          select: {\n            rating: true\n          }\n        }\n      }\n    });\n\n    // Ürünleri frontend formatına çevir\n    const formattedProducts = products.map(product => {\n      const activeDiscount = product.discounts[0];\n      const reviewsCount = product.reviews.length;\n      const averageRating = reviewsCount > 0 \n        ? product.reviews.reduce((sum, review) => sum + review.rating, 0) / reviewsCount \n        : 0;\n\n      return {\n        id: product.id,\n        name: product.name,\n        slug: product.slug,\n        description: product.description,\n        price: Number(product.price),\n        originalPrice: product.originalPrice ? Number(product.originalPrice) : null,\n        images: product.images,\n        stock: product.stock,\n        isActive: product.isActive,\n        isFeatured: product.isFeatured,\n        category: product.category.name,\n        categorySlug: product.category.slug,\n        rating: Math.round(averageRating * 10) / 10,\n        reviews: reviewsCount,\n        discount: activeDiscount ? activeDiscount.percentage : null,\n        badgeText: activeDiscount?.badgeText || null,\n        badgeColor: activeDiscount?.badgeColor || null,\n        isNew: product.createdAt > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Son 30 gün\n        createdAt: product.createdAt,\n        updatedAt: product.updatedAt\n      };\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: formattedProducts,\n      count: formattedProducts.length\n    });\n\n  } catch (error) {\n    console.error('Products API Error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Ürünler yüklenirken hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}