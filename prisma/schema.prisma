generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String     @unique
  password      String
  role          UserRole   @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  logs          Log[]
  addresses     Address[]
  cartItems     CartItem[]
  orders        Order[]
  reviews       Review[]

  @@map("users")
}

model Category {
  id             String     @id @default(cuid())
  name           String
  slug           String     @unique
  description    String?
  image          String?
  parentId       String?
  displayOrder   Int        @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  showOnHomepage Boolean    @default(false)
  parent         Category?  @relation("CategorySubcategories", fields: [parentId], references: [id])
  subcategories  Category[] @relation("CategorySubcategories")
  products       Product[]

  @@map("categories")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  slug          String      @unique
  description   String
  price         Decimal
  originalPrice Decimal?
  images        String[]
  stock         Int         @default(0)
  isActive      Boolean     @default(true)
  isFeatured    Boolean     @default(false)
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isSaleActive  Boolean     @default(true)
  cartItems     CartItem[]
  discounts     Discount[]
  orderItems    OrderItem[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reviews       Review[]

  @@map("products")
}

model Discount {
  id         String   @id @default(cuid())
  productId  String
  percentage Int
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean  @default(true)
  showBadge  Boolean  @default(true)
  badgeText  String   @default("Ä°ndirim")
  badgeColor String   @default("#ff0000")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("discounts")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  totalAmount       Decimal
  shippingAddressId String?
  billingAddressId  String?
  paymentMethod     String?
  paymentStatus     PaymentStatus @default(PENDING)
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  items             OrderItem[]
  billingAddress    Address?      @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?      @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id             String      @id @default(cuid())
  userId         String
  type           AddressType
  firstName      String
  lastName       String
  company        String?
  address1       String
  address2       String?
  city           String
  state          String
  postalCode     String
  country        String
  phone          String?
  isDefault      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]     @relation("OrderBillingAddress")
  shippingOrders Order[]     @relation("OrderShippingAddress")

  @@map("addresses")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  comment    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Banner {
  id        String     @id @default(cuid())
  title     String
  subtitle  String?
  image     String
  link      String?
  type      BannerType @default(HERO)
  isActive  Boolean    @default(true)
  order     Int        @default(0)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("banners")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

model Log {
  id        String   @id @default(cuid())
  type      String
  userId    String?
  message   String
  meta      Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum BannerType {
  HERO
  FEATURED_PRODUCTS
}
