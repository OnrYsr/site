// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Kullanıcı modeli
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  orders        Order[]
  cartItems     CartItem[]
  addresses     Address[]
  reviews       Review[]

  @@map("users")
}

// Kullanıcı rolleri
enum UserRole {
  USER
  ADMIN
}

// Kategori modeli
model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  products    Product[]

  @@map("categories")
}

// Ürün modeli
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal
  originalPrice Decimal?
  images      String[] // JSON array olarak saklanacak
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  discounts   Discount[]

  @@map("products")
}

// İndirim modeli
model Discount {
  id          String   @id @default(cuid())
  productId   String
  percentage  Int      // İndirim yüzdesi
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  showBadge   Boolean  @default(true) // İndirim etiketi göster/gizle
  badgeText   String   @default("İndirim")
  badgeColor  String   @default("#ff0000") // Hex renk kodu
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("discounts")
}

// Sepet öğesi modeli
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Sipariş modeli
model Order {
  id            String        @id @default(cuid())
  userId        String
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  totalAmount   Decimal

  shippingAddressId String?
  billingAddressId  String?

  shippingAddress   Address?   @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?   @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])

  paymentMethod String?
  paymentStatus PaymentStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         OrderItem[]

  @@map("orders")
}

// Sipariş durumu
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Ödeme durumu
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Sipariş öğesi modeli
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())

  // İlişkiler
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Adres modeli
model Address {
  id          String   @id @default(cuid())
  userId      String
  type        AddressType
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")

  @@map("addresses")
}

// Adres tipi
enum AddressType {
  SHIPPING
  BILLING
}

// Ürün değerlendirmesi modeli
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 arası
  comment   String?
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Banner modeli (Admin panel için)
model Banner {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  image       String
  link        String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banners")
}

// Site ayarları modeli
model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}
