name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Manuel tetikleme için

jobs:
  deploy:
    name: Deploy to Raspberry Pi Production
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Deploy to Raspberry Pi (Self-Hosted)
      run: |
        set -e  # Exit on any error
        
        echo "🚀 Starting self-hosted Raspberry Pi deployment..."
        echo "📍 Working directory: $(pwd)"
        
        # Navigate to project directory
        cd /home/muse3dstudio/muse3dstudio/web-app
        echo "📂 Current directory: $(pwd)"
        
        # Backup current code
        echo "💾 Backing up current code..."
        cp -r . ../web-app-backup-$(date +%Y%m%d-%H%M%S) || echo "Backup failed, continuing..."
        
        # Update code from GitHub
        echo "⬇️ Updating code from repository..."
        git stash push -m "Auto-stash before deployment $(date)" || echo "Nothing to stash"
        git pull origin main
        echo "✅ Code updated from GitHub"
        
        # Install dependencies
        echo "📦 Installing dependencies..."
        npm install --production=false
        echo "✅ Dependencies installed"
        
        # Ensure Docker services are running FIRST
        echo "🐳 Starting Docker services..."
        sudo docker compose up -d postgres redis
        echo "✅ Database services started"
        
        # Wait for PostgreSQL to be ready
        echo "⏳ Waiting for PostgreSQL to be ready..."
        timeout=60
        while ! sudo docker compose exec postgres pg_isready -U postgres > /dev/null 2>&1; do
          sleep 2
          timeout=$((timeout - 2))
          if [ $timeout -le 0 ]; then
            echo "❌ PostgreSQL failed to start within 60 seconds"
            exit 1
          fi
        done
        echo "✅ PostgreSQL is ready"
        
        # Generate Prisma client
        echo "🗄️ Generating Prisma client..."
        npx prisma generate
        echo "✅ Prisma client generated"
        
        # Update database schema
        echo "🗄️ Updating database schema..."
        npx prisma db push
        echo "✅ Database schema updated"
        
        # Seed database with categories and products
        echo "🌱 Seeding database with updated categories and products..."
        npm run db:seed
        echo "✅ Database seeded with new data"
        
        # Update systemd services if changed
        echo "🔧 Updating systemd services..."
        sudo cp systemd/muse3d-web.service /etc/systemd/system/ || echo "Service file not changed"
        sudo cp systemd/cloudflare-tunnel.service /etc/systemd/system/ || echo "Tunnel service not changed"
        sudo systemctl daemon-reload
        echo "✅ Systemd services updated"
        
        # Restart web application service
        echo "🔄 Restarting web application..."
        sudo systemctl restart muse3d-web.service
        echo "✅ Web service restarted"
        
        # Restart Cloudflare tunnel (if needed)
        echo "🔗 Checking tunnel service..."
        sudo systemctl restart cloudflare-tunnel.service
        echo "✅ Tunnel service restarted"
        
        # Wait for services to be ready
        echo "⏳ Waiting for services to start..."
        sleep 15
        
        # Check service status
        echo "📊 Service status:"
        sudo systemctl is-active muse3d-web.service
        sudo systemctl is-active cloudflare-tunnel.service
        
        # Check if the app is responding
        echo "🌐 Testing application health..."
        curl -f http://localhost:3000/api/health > /dev/null 2>&1 && echo "✅ App healthy and responding" || echo "⚠️ Health check failed"
        
        echo "🎉 Self-hosted Raspberry Pi deployment completed successfully!"
        
    - name: Verify deployment
      run: |
        echo "🌐 Verifying self-hosted Raspberry Pi deployment..."
        
        # Wait for services to be fully ready
        sleep 20
        
        # Check local health first
        local_health=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || echo "000")
        echo "🏠 Local health response: $local_health"
        
        # Check if site is responding via domain
        response=$(curl -s -o /dev/null -w "%{http_code}" https://muse3dstudio.com || echo "000")
        echo "📊 Domain response code: $response"
        
        # Check health endpoint specifically
        health_response=$(curl -s -o /dev/null -w "%{http_code}" https://muse3dstudio.com/api/health || echo "000")
        echo "🏥 Domain health endpoint response: $health_response"
        
        if [ "$local_health" = "200" ] && [ "$response" = "200" ] && [ "$health_response" = "200" ]; then
          echo "✅ Self-hosted Raspberry Pi deployment successful! Site is live and healthy."
        elif [ "$response" = "502" ] || [ "$response" = "503" ]; then
          echo "⚠️ Site is showing $response - services might still be starting up"
        else
          echo "❌ Deployment verification failed - response codes: local=$local_health, site=$response, health=$health_response"
        fi
        
        echo "🎉 Self-hosted Raspberry Pi deployment verification completed"
