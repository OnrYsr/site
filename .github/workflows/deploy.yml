name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Manuel tetikleme i√ßin

jobs:
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        # Alternative SSH scan with port specification
        ssh-keyscan -p 22 -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Test SSH Connection
      run: |
        ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"
        
    - name: Deploy to server
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e  # Exit on any error
          
          echo "üîÑ Starting deployment..."
          echo "üìç Working directory: $(pwd)"
          
          # Navigate to project directory
          cd ${{ secrets.SERVER_PATH }}
          echo "üìÇ Current directory: $(pwd)"
          
          # Check current git status
          echo "üìã Current git status:"
          git status --porcelain
          
          # Stash any local changes (if any)
          git stash push -m "Auto-stash before deployment $(date)"
          
          # Pull latest changes
          echo "‚¨áÔ∏è Pulling latest changes..."
          git pull origin main
          echo "‚úÖ Code updated"
          
          # Install dependencies
          echo "üì¶ Installing dependencies..."
          npm install --production=false
          echo "‚úÖ Dependencies installed"
          
          # Generate Prisma client
          echo "üóÑÔ∏è Generating Prisma client..."
          npx prisma generate
          echo "‚úÖ Prisma client generated"
          
          # Build application
          echo "üî® Building application..."
          npm run build
          echo "‚úÖ Application built"
          
          # Check PM2 status before restart
          echo "üìä Current PM2 status:"
          pm2 list || echo "PM2 not running any processes"
          
          # Stop and restart PM2 application
          echo "üîÑ Restarting PM2..."
          pm2 stop muse3dstudio || echo "Process not running"
          pm2 delete muse3dstudio || echo "Process not found"
          pm2 start ecosystem.config.js
          pm2 save
          echo "‚úÖ PM2 restarted"
          
          # Wait a moment for the app to start
          sleep 5
          
          # Show PM2 status
          echo "üìä Final PM2 status:"
          pm2 status
          
          # Check if the app is responding
          echo "üåê Testing local app response..."
          curl -f http://localhost:3000 > /dev/null 2>&1 && echo "‚úÖ App responding on port 3000" || echo "‚ö†Ô∏è App not responding on port 3000"
          
          echo "üöÄ Deployment completed successfully!"
        EOF
        
    - name: Verify deployment
      run: |
        echo "üåê Checking site status..."
        
        # Wait a bit more for the site to be fully ready
        sleep 10
        
        # Check if site is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" https://muse3dstudio.com || echo "000")
        echo "üìä Site response code: $response"
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Site is working perfectly!"
        elif [ "$response" = "502" ] || [ "$response" = "503" ]; then
          echo "‚ö†Ô∏è Site is showing $response - backend might be starting up"
        else
          echo "‚ùå Site check failed with code: $response"
        fi
        
        echo "‚úÖ Deployment verification completed"
