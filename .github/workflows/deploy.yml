name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Manuel tetikleme için

jobs:
  deploy:
    name: Deploy to Raspberry Pi Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        # Alternative SSH scan with port specification
        ssh-keyscan -p 22 -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Test SSH Connection
      run: |
        ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"
        
    - name: Deploy to Raspberry Pi
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e  # Exit on any error
          
          echo "🚀 Starting Raspberry Pi deployment..."
          echo "📍 Working directory: $(pwd)"
          
          # Navigate to project directory
          cd ${{ secrets.SERVER_PATH }}
          echo "📂 Current directory: $(pwd)"
          
          # Check current git status
          echo "📋 Current git status:"
          git status --porcelain
          
          # Stash any local changes (if any)
          git stash push -m "Auto-stash before deployment $(date)"
          
          # Pull latest changes
          echo "⬇️ Pulling latest changes..."
          git pull origin main
          echo "✅ Code updated"
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          npm install --production=false
          echo "✅ Dependencies installed"
          
          # Generate Prisma client
          echo "🗄️ Generating Prisma client..."
          npx prisma generate
          echo "✅ Prisma client generated"
          
          # Update systemd services if changed
          echo "🔧 Updating systemd services..."
          sudo cp systemd/muse3d-web.service /etc/systemd/system/ || echo "Service file not changed"
          sudo cp systemd/cloudflare-tunnel.service /etc/systemd/system/ || echo "Tunnel service not changed"
          sudo systemctl daemon-reload
          echo "✅ Systemd services updated"
          
          # Ensure Docker services are running
          echo "🐳 Checking Docker services..."
          sudo docker compose up -d postgres redis
          echo "✅ Database services running"
          
          # Restart web application service
          echo "🔄 Restarting web application..."
          sudo systemctl restart muse3d-web.service
          echo "✅ Web service restarted"
          
          # Restart Cloudflare tunnel (if needed)
          echo "🔗 Checking tunnel service..."
          sudo systemctl restart cloudflare-tunnel.service
          echo "✅ Tunnel service restarted"
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 15
          
          # Check service status
          echo "📊 Service status:"
          sudo systemctl is-active muse3d-web.service
          sudo systemctl is-active cloudflare-tunnel.service
          
          # Check if the app is responding
          echo "🌐 Testing application health..."
          curl -f http://localhost:3000/api/health > /dev/null 2>&1 && echo "✅ App healthy and responding" || echo "⚠️ Health check failed"
          
          echo "🎉 Raspberry Pi deployment completed successfully!"
        EOF
        
    - name: Verify deployment
      run: |
        echo "🌐 Verifying Raspberry Pi deployment..."
        
        # Wait for services to be fully ready
        sleep 20
        
        # Check if site is responding via domain
        response=$(curl -s -o /dev/null -w "%{http_code}" https://muse3dstudio.com || echo "000")
        echo "📊 Domain response code: $response"
        
        # Check health endpoint specifically
        health_response=$(curl -s -o /dev/null -w "%{http_code}" https://muse3dstudio.com/api/health || echo "000")
        echo "🏥 Health endpoint response: $health_response"
        
        if [ "$response" = "200" ] && [ "$health_response" = "200" ]; then
          echo "✅ Raspberry Pi deployment successful! Site is live and healthy."
        elif [ "$response" = "502" ] || [ "$response" = "503" ]; then
          echo "⚠️ Site is showing $response - services might still be starting up"
        else
          echo "❌ Deployment verification failed - response codes: site=$response, health=$health_response"
        fi
        
        echo "🎉 Raspberry Pi deployment verification completed"
